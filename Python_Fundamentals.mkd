# Python Fundamentals #

Python is a popular open source programming language that is commonly used for scripting, web programming, data analysis, and hobbyist projects. Python is object oriented, strongly typed, dynamically typed, and uses duck typing. Python is flexible, and can be interpreted or compiled. Python uses white-space to limit syntax. Multiple Python runtimes exist, written to many platforms and in different languages.

## Getting Started ##

Python is probably available on your development platform of choice, look up how to install it on your system if you don't know how.

For quick scripting you can use a REPL by running Python in your command window. Note that you may have to specify `python`, `python2`, or `python3` depending on your install. This course will use Python 3, though remember you may come across Python 2 code in the wild that can't run on Python 3. The REPL lets you type in code and can immediately evaluate what you write. *Protip: you can use an underscore to refer to the value returned by the last evaluation you ran, but only in the REPL*.

Remember to use the `print(some_string)` function to print to the shell, python 2 uses `print some_string`. Remember to use 4 spaces for your indentation as convention. Avoid using tabs, and do not mix tabs and spaces. If you must break convention, do it consistently. Breaking convention for readability will probably be begrudgingly accepted.

Python has a series of documentation called PEPs, Python Enhancement proposals, and is similar to RFCs. PEP-20 is called "The Zen of Python", and tries to capture the spirit of using it. Check it out by running `import this` at a REPL.

### Syntax basics ###

`import` brings in module libraries. Object methods are accessed using `.` like C-style languages. You can import module functions more selectively using `from some_module import your_function_choice` and `your_function_choice` is accessible in your namespace. You can give aliases to imported code using `as` after the import, but this is not heavily encouraged, remember code clarity.

#### Value Types ####

Python numbers grow as the value grows, can be abitrarily large. Python types can be grouped into "Scalar" types, which are not collections. Scalar types include `int`, `float`, `None`, and `bool`.

`int` values hold integer values. You can specify binary, octal, and hex values using `0b`, `0o`, and `0x` before your value. To convert a value of a different type into an int, just pass it into `int()`. When rounding, the value is floored. You can use scientific notation for int values.

Python has values `nan` for a value that can not be interpreted as a number, and `inf`, and `-inf` for infinite values.

`float()` can convert other values into floats.

`None` is Python's `null` value. `True` and `False` are `bool` values. You can pass in values to `bool()` to generate a `True` or `False` value. `0` and `0.0` are falsy values, positive and negative numbers are truthy. Empty arrays and empty strings are falsy. Arrays with values and non-empty strings are truthy. The string "False" is truthy.

#### Relational Operators ####

Python uses

```
==
!=
<
>
<=
>=
```

#### Conditionals ####

```
if True:
    print("Hello World!")

if bool("More?"):
    print("Yes please")

if "Really more":
    print("YES")

print("Are sure sure?")
anser = input()
if answer == "Really more":
    print("OK THEN")
elif anwser == "Nah not really":
    print("move along")
else:
    print("WHAAT?")
```

#### Looping ####

Python has `while` loops and `for` loops

```
c = 5
# the below can be written like
# while c:
# but remember "Explict is better than implict"
while c != 0:
    print(c)
    c -= 1

```

Python does not have a "do-while" loop in the language. Instead, use `while True:` then use the `break` keyword to get out of the loop early as you can. This is a language idiom.

## Strings and Collections ##

Python has `str`, `bytes`, `list`, and `dict` types.

`str` are immutable sequences of Unicode "codepoints", and are Python's strings. `str` literals can be delimited with single or double quotes.

Literal strings can be concatenated with a space between the two values. Multi-line strings are delimited with 3 quotes/double quotes, or you can use `\n`. `\n` is Universally supposed, meaning it will use your OS's conventions for newlines, like carrage return, newline on Windows.

In the case of strings with backslashes, if you don't want to escape every backslash, you can use "raw strings", where you lead the string like `r'Hello!'`

You can use `str()` to convert values to strings. `str` is considered a sequence type, so you can index it like arrays in other languages. Python has no character type, a character is just a `str` of `len(mystring) == 1`

Strings are Unicode, and you can refer to characters using character codes and Python will resolve them for you on print.

`byte` are immutable values that written as `b'some data'`. You must know the encoding of a `byte` or `str` to decode or encode.

`list` are mutable sequences of objects and are literally written as `[1, 2, 3, "four", some_var]`. `list` has many methods you can use to manipulate them. You can create lists from other collections using `list("my character list")`. 

If you have a long literal list, you can break up the declaration on separate lines as long as they end with a comma. You can also have a "trailing comma" at the last element in the list, and this will not be a syntax error.

`dict` is Python's dictionary or associative array type. `dict` literals are written like `{k1: v1, k2: v2}`. To add a new key and value to a `dict`, use something like `my_dictionary['best_key'] = "best_value"`, and it'll be added.

### `for` loops ###

Python's `for` loops are like "for each" loops, like

```
for member in iterable:
    print(member)

```

If you want a loop that's closer to a C-style for loop, you can use a "range", like `for x in [0..10]:`

### `with` ###

`with` is like C#'s `using`, for manipulating resources that maintain an open state. You use it like

```
with urlopen(my_url) as response_data:
    for line in response_data:
        print(line)

```


## Modularity ##

Modules are how you create smaller, reusable code files in larger Python programs.

To use modules you've written, you use `import firstscript` if the file you made is called "firstscript.py" and it's in your local directory. When you import a module, its code is executed immediately, so you may want block your code into smaller sized functions.

You define functions in blocks like

```
def my_first_function():
    print("hello world!")

def my_second_function():
    return "hello world!"

def my_empty function():
    return

what_am_i = my_empty_function()
if what_am_i is None:
    print("I am nothing!")
else:
    print("I am significant")
```

### Double Underscores ###

Python uses some special syntax, wrapping some attributes in double underscores. For example, `__name__` will resolve to the name of this module or "__main__" if it's being run as a script.

You can use this to your advantage if you want to be able to run your code as both a module in Python or from a shell. You check

```
if __name__ == "__main__":
    # python you want to run if called by
    # name in the shell

```

It is conventional to write your code in such a way that can be used when called directly from the command line, or imported as a module.

If you'd like to import a handful of useful functions from a module, you can use `from words import (fetch_words, print_words)` or you can even (while testing) use `from words import *`, though is isn't recommended for prod code.

It's recommended to create a `main()` function if you intend your code to be run as a script, and to parameterize your functions as much as you can to facilitate reuse.

It's convention to space your function definitions with two newlines.

### Doc Strings ###

Python has a special syntax for creating documentation, called doc strings. Doc strings are triple double-quotes the first line after the `def` line for a function. There are different conventions for formatting doc strings, it may vary from project to project. Google has a convention available, that allows the doc string to be parsed for a number of utilities.

Docstings can be looked at using `help()`, check this out to see about calling it from the shell.

### Comments ###

If you need to use comments, use `#`. This will comment out the rest of the line after the `#`. It may be useful to put in UNIX shebangs in your python files so you can just call the filename, and it runs as a command under the right version of Python.

Windows has a utility called PyLauncher that will associate UNIX shebangs to the right version of Python on Windows, without changing the shebang. Check it out.


## Objects ##

Python is an Object Oriented language, and has language features that enable object oriented style programming.

Python has a build-in `id()` function that may be useful for testing and debugging some code that will create an id for the object to it, the idea being that if two different objects, but they point to the same value, the ids will be the same. If you really want two objects pointing to two separate values that are equal to each other, you basically need to clone the value.

If you pass in a mutable object into a function, and modify it, the changes will persist when the function returns. However, if you pass in an object, assign it to a new object in the function, it will revert back to the prior assigned value on return. This is pass by reference.

### Function Arguments ###

You can specify optional arguments to functions by specifying default values in the definition.

```
# Optional parameters must come after
# required parameters
def banner(message, border='-'):
    line = border * len(message)
    print(line)
    print(message)
    print(line)

banner("Hey welcome!")
banner("What's up", "*")
```

Python lets you change order of parameters by using the name of the parameter equal to a value. Otherwise, Python resolves parameters by position.

```
banner(border="=", message=some_message)
```

Be wary when you used a derived value as a parameter default value, as this value is evaluated when imported and only evaluated once.

Also be wary of using mutable collections as default values for functions. Python will close over this collection and if you modify its contents, the changes will persist over function calls. Therefore, it's a best practice to always use immutable values as defaults. In the case of collections, like a list, try setting its default value to `None` like so

```
# menu is intended to be a list
def add_spam(menu=None):
    if menu is None:
        menu = []
    menu.append('spam')
    return menu

```

### Python's type system ###

Python is dynamically typed (meaning you don't have to declare what type a variable is) and is strongly typed (meaning there are no implicit type conversions) However, values do have an evaluated `bool` value in the case of conditionals and loops that you don't necessarily have to wrap in a `bool()`

### Variable scope ###

Python has four levels of scoping

Local | in the current function
Enclosing | any and all enclosing functions (like closures?)
Global | Defined at top level, accessible everywhere
Builtin | come in from the Python runtime

Suppose though you have a module that are a collection of functions that have some value you want to close over like if you were writing JavaScript. If you want to access/change that value in your functions, you must declare you are referring to a global variable using `global` followed by the name of that variable.

### Everything is an object ###

Including modules, functions, builtin values, and "basic" values. To find the type of a value, you can pass it into `type()`. To find the attributes of an object, you can pass it into `dir()`.

`__name__` in the case of functions or modules will return the name of the function or the module. `__doc__` will return the docstring for that object if available.


## Collections ##

We revisit `str`, `list`, and `dict`, but also introduce `tuple`, `range`, and `set`.

### `tuple` ###

`tuple` is an immutable sequence of objects where the objects can not be changed, nor can any other elements be added. `tuple` is written like `x = ("Hello", "world", 2)` and are accessed like `x[0]`. 

You can find the length of a tuple using `len()`, you can iterate over them with `for` loops, and you can concatenate tuples together with `+`. `tuple` can be nested. If you really want a tuple of length 1, you must have a trailing comma. 

You can write tuple literals with parens, or you can omit them, and just write them as comma separated values. This is useful for returning multiple values from a function. Tuples can be *unpacked* by assigning a comma separated list of values to a tuple, like

```
lower, upper = minmax([1, 2, 50, 4])
# the tuple returned by minmax will have its first value saved into lower
# and the second into upper
```

Tuple unpacking works with nested tuples, and you can write a value swap like `a, b = b, a`

You can create tuples from other collections by passing them into `tuple()`, and you can test if a value is contained in a tuple by using the `in` keyword, perhaps together with `not`. `in` and `not in` can be used with other collections also.

### `str` ###

You can use `len()` for finding the length of a `str`. You can use `+` for string concatenation, but it is more idiomatic to use `join` to put together strings from a collection, with `__self__` (is this right?) being a separator between each string in the collection.

```
''.join(['high', 'way', 'man'])
# returns 'highwayman'
# this is considered idiomatic

'|'.join(['age','gender','location'])
# returns 'age|gender|location'
```

`split()` and `partion()` separate strings into multiple values based on a delimiter. `partion()` returns a tuple which will contain three strings. The author shows that if you don't want to save the separator return value, you can assign it to `_`, which is a little bit of a convention for temp or dummy values.

`format()` is used in python3 for string interpolation. 

```
"The age of {0} is {1}".format("Jim", 32)

"The age of {} is {} and weighs {}".format("Jim", 32, 170)

"Current position: {lat}, {long}".format(lat="60N", long="120w")
```

You can pass in objects as a parameter, and access by index into them in your template string.

### `range` ###

A `range` is a progression of integers, written like

```
range(5)
# represents values 0, 1, 2, 3, 4

range(10, 20)
# represents values 10 - 19

range(2, 10, 2)
# represents values 2, 4, 6, 8
```

Be care with range though: If you're looping over some values, always prefer iterating over the collection versus looping over a count of a collection passed into range

It's better to use the `enumerate()` function, passing into it your collection. Iterating over the return value of `enumerate` creates tuple pairs, in the case of lists, of the index, and the value at that index. This is more idiomatic than using a range. You can then use unpacking to create more concise and intentional statements.

### `lists` ###

You can access lists, and other collections, using negative indexes to work from the end of the list.

You can specify a *slice* of a list, a range of values from a list, using something like

```
scores = list(range(11))
only_game_ratings_that_matter = scores[6:10]
```

You can write `s[3:]` to slice from the 3 position to the end, or `s[:7]` to slice from the start up to, but not including, the 7 position.

You can leverage slices to idiomatically clone a list.

```
new_list = old_list[:]
# new_list is not old_list
# but new_list == old_list

```

Be aware there are other ways to copy a list, like using the `.copy()` method, or passing a collection into `list()`. 

Note that copies of collections will be shallow copies, meaning that its elements will still be the same objects, even if the collections themselves are different objects.

The author illustrates this with an example of creating a list that contains a list `[-1, 1]`, and creates a new list that generates 5 shallow copies of `[-1, 1]`. The author then appends 7 to the list at index 3, yet when we look at the data structure, every list is now `[-1, 1, 7]`. This is because these shallow copies all pointed to the same list object, even if the references themselves are different.

To find where a value is in a list, you can use the list method `.index()` and pass in the value you'd like to find. You can count lists using `count()` and check to see if a value is included with the `in` operator.

To remove elements from lists, you use the del keyword to delete by index (like `del s[4]`), or use the `.remove()` method to remove by value. You can insert values using the `.insert()` method.

To simply add values to the end of the list, use `+` or `+=` or `.entend()` and pass in your value, or collection value. These operators work with other collection types also. Try it!

Lists can be reversed in place with `.reverse()`, and sorted with `.sort()`. You can pass in a *callable object* (functions are one type) as a parameter to `sort()` called key, and the list will be sorted according to the values generated by the object. You can use `reversed()` and `sorted()` to pass in a list and get a new one out.


### Dictionaries ###

Remember `dict` are written like JSON objects. The `dict()` constructor can take in Lists of Tuple pairs, or as a number of named parameters. Dicts can be iterated over with `for` loops. You can do this from keys, values, or tuple pairs called items.

`in` and `not in` work on keys in a dictionary.

You can add to the dictionary with `+=`


### `set` ###

Sets are unordered and immutable and elements must be unique. Sets are written like `{1, 2, 3, 4}`. You can pass in Lists into the `set()` constructor, and it'll remove duplicates.

You can use `in` and `not in` to test memberships. `.add()` and `.remove()` and `.discard()` to add and remove elements.

Sets have built in set operations, like `.union()`, `.intersection()`, `.difference()`. You can test for set equivalency with `==`. `.issubset()` and `.issuperset()` and `.isdisjoint()` can be very useful also.


### Protocols ###

A protocol is like an interface in Java or C#, it is a set of operations that must be supported if a type is to implement the protocol. There are a number of Protocols that the base collection types implement, however, you don't need to explicitly define in code that an object implements a protocol, it's understood if you just implement the methods.

For example, there are protocols like Container, Sized, Iterable, and Sequence.



## Exceptions ##

Python makes use of exceptions similarly to Java and C#. Handling exceptions can be done with try/except blocks, like

```
    try:
        bomb_it = [1, 2, 3]
        can_i = int(bomb_it)
    except (ValueError, TypeError):
        print("Conversion Failed!")
```

Don't try to catch `IndentationError`, `SyntaxError`, or `NameError` normally, these are errors that need to be fixed by the developer writing the code.

If you are going to swallow an exception *(and why would you ever?)*, Python does not allow empty code blocks, so there is the `pass` word that helps make things like this explicit.

To refer to your exception object, name like `except (ValueError, TypeError) as e:`, now your exception is the `e` object in your handling.

Avoid returning error codes, stick with exceptions and letting them float up if need be. If you want to do some logging, but want to let the exception keep floating up, use `raise`, like you would use `throw;` in C#, rethrowing the same exception.

You should make good effort to document all the exceptions your API can raise since it is best practice to handle all your exceptions in client code as best as you can. You are encouraged to use "Standard exceptions" in most cases and should try to have your errors fit into one of them. 

To throw new exceptions, use something like

```
raise ValueError("Cannot compute square root of negative number {}".format(x))
```

Python believes that objects of a protocol should raise errors that are also considered part of the protocol, that protocol functions should error similarly across implementations with expected errors.

Lookup common error types and try to follow them. It is possible to create new exceptions, but strongly consider if you can use a standard error instead.

Try to avoid raising `TypeError`s and type checking if you can. Python is intended to be flexible with objects and values it accepts and is acceptable to take a "just let it fail" stance.

Python tends to work better embracing "Asking for forgiveness" with catching specific exceptions simply and directly, and having the main block of your code really be the happy path.

You can use try/finally to do actions after either the happy path works, or exceptions occur. For larger projects, check out "Resource Managers" that sound like they provide more robust garbage cleanup.

Be aware that Python has modules that may be platform-specific if they handle lower-level APIs, like in the case of handling specific key events


## Iterables, Comprehensions, and Generators ##

Comprehensions are a declarative and functional means to create collections using "filtering", projection, mapping, etc. A list comprehension can look like

```
numbers = range(100)

evens = [x for x in numbers if x % 2 == 0]
```

This form takes iterables as acceptable values to iterate over, so think strings, sets, tuples, lists, dicts, etc.

You can create sets, dicts also with comprehensions. Their syntaxes are like

```
{ x % 5 for x in range(100) }

# Note the colon delimits key and value
{ x : 2 * x for x in range(100) }
```

If you want to iterate over dicts, remember to use tuple unpacking, iterating over your dict.items() like `for country, capital in country_to_capital.items()`

Beware if you are generating dicts that if your key expression happens to create duplicate keys, you will overwrite values for as many times as you create a matching key.

Comprehensions are very powerful, but can turn into an unreadable mess. Be curteoeous to your fellow programmers by writing comprehensions that are straight forward, purely functional, and readable. Break things up if you got something crazy.

*Iterable* and *Iterator* are some fundamental Python protocols. When you have an Iterable object, you can grab its Iterator by passing the object into `iter()`. Iterator objects support the `next()` function and return the next object in the collection. When iterators have completed iterating over the collection, they throw `StopIteration` exception. The language watches for this.


*Generators* are similar to comprehensions, but are defined as functions that `yield` values. You iterate over a generator like an iterable, but comprehensions are completely evaluated on call. Generators only generate the next value on each call to `next()`, and the value returned is the value followed after`yield`. You can use `return` statements to stop the iteration in a generator.

```
# From the course
def gen246():
    print("About to yield 2")
    yield 2
    print("About to yield 4")
    yield 4
    print("About to yield 6")
    yield 6

for x in gen246():
    print(x)
```

Generators are, by nature, stateful. Local variables will persist their values. When a generator is called subsequent times, execution will start not at the start of the generator function, but at the next instruction after the last `yield` statement.

Because generators only do enough work to get the next yielded value, they can be used to work with massive sequences, input streams, mathematical series and calculations that are otherwise infinite.

You can write a generator expression similarly to comprehensions

```
# Note the parens below, this means this is a generator
# not a "tuple comprehension" or anything like that

million_squares = (x*x for x in range(1, 1000001))
```

Suppose you want more control over how you iterate over values. Python has under `itertools` a number of iterators you can use for your generators, like infinite iterators, or accumulation iterators.

The `any()` and `all()` functions may be useful when working with generators. They iterate over the values passed into it and do logical OR and AND of the values.


