Building End-to-End Multi-Client Service Oriented Applications - Angular Edition - Miguel Castro
--------------------------------------------

This is a comprehensive course in building a complete app, full stack, business logic, etc. Uses Unit tests at several layers, Dependency Injection, including into WCF.

We'll be building a Car rental system that uses a Service Oriented Architecture. There are client entities and business entities, and we'll define why there should be the distinction.

Data base and data access, writing the data access layer.

WCF services and business engines, adding security, unit tests.

Service hosting, and the line that business logic will be behind.

Proxy layer, accessing the services, start of the client side.

Web site using ASP .NET MVC, Angular, Bootstrap, Web API, etc.

Desktop app using WPF.

The author will write and describe in detail several key components that are representitive of the project, but not everything is written in front of you.

## Demo of Service Oriented Application

The key is to spot the patterns that work and add to cleanliness, ease to work with, and good experience.

Author recommends Dot-notation for project and foldernaming, and that the file structure remains pretty flat. Abstractions and implementations should be in separate projects for unit testing and dependency injection.

## SOA & Technology

SOA systems are loosely coupled, using standards and protocols over network connections and exposes an API to use. The author sees SOA as the next step after Procedural Programming, Object oriented programming, and component oriented programming.

SOAs should be easy for clients to use, and clients shouldn't have to know too much business logic in order to use the APIs. Nearly all business logic should be behind the service, and should serve as the single point of entry to the system.

The service should handle faults, leave the system in a consistent state, be secure, and handle threading properly. Should otherwise be considered a blackbox.

Sample diagram of a typical architecture using SOA

The author will use WCF and Web API, where he doesn't see them as totally competing, but as two different tools that handle certain tasks well. This app will use SQL Server, Entity Framework (Code First), Managed Extensibility Framework (MEF), ASP .NET MVC, Angular JS, Bootstrap, WPF, and other libraries.

## Architecture and Database

Uses 4 tables, and tables created by Simple Membership.

Two major use cases: customer and employee. Customers can reserve an available car for a set of dates, cancel an existing reservation, and view rental history. Employees can manage car inventory, rent a reserved car to customers, accept a returned car, and view customer information.

Three major service divisions: Inventory service, rental service, and account service. These services manage the respective subsystems of the rental business. These services work with DI. The website uses Forms Authentication and the Desktop app uses Windows Auth since it is an intranet app. Authorization of access of data from user to user needs to be secured also, which is important to handle right.

Diagram of the Architecture used in this project. Note that both the client and server sides of the architecture use Service Contracts, at the line of separation between client and server. Both have their own sets of Entities that are not passed through for passing-through's sake. The server side uses Data Repositories, Data Repositories Factories, and miscellaneous DTOs between SQL server and the Business Service Layer. This is the Data Access layer.

Note that the architecture has points that sometimes skips layers, reaching around others. He describes the reason for this is to avoid "pass through" code, that for really simple calls, going through all the layers becomes tedious.

## Entities & Core Functionality

2 sets of entities, the business and client. They do not cross the client/server separation. They can travel up and down each layer on their side of the archetecture. Each set has their own realm of knowledge and duties that probably don't need to be present in both sides of the separation.

We start with two projects CarRental.Business.Entities and CarRental.Client.Entities, and start with creating classes for `Car` on each side, where we use them as Data Contracts. Decorate the classes with `[DataContract]` and the properties with `[DataMember]`. Note that he decorates this only on the business entity, and the client uses full `get` and `set` on the class since the client will have more to do and will me more exposed and busy, but both do have property names that the other has to fulfill the data contract.

The author shows a way around declaring DataContract namespaces by chaing the AssemblyInfo.cs file under `Properties` of the project. There is a declaration for `ContractNamespace` on the business side that you can copy/paste into the client side one, and then you have data contract equivalency.

The author has a project `Core` that does not contain any business logic. It's code that can shared across projects, solutions, businesses, etc that are not particular to the app you're building. He has classes here called `EntityBase` and `IIdentifiableEntity`, which `Car` can implement, basically returning an Id.

Business entities map to a db table. DAL can provide ORM mapping if needed.

Client entities may leverage property change notification and dirty tracking. When a client class instance changes value, it can through properties notify others of the change, and UI, etc can update because of it.

The author shows a way of avoiding inadvertently allowing a property changed event handler having multiple of the same handler being added.

The author also shows a way of adding property changed events through Lambda expressions.

The author also shows a way of using a Lambda expression to do an recursive object graph walk and grab and return all dirty values.

For validation in the client objects, there can be a lot of framework specific implementations you can use, and your choice will be specific to the software the client objects will be used in. The author will go over a framework FluentValidation for the Desktop client of the system.

Unit tests are present to test his property change notification, dirty tracking, and validation. The author use two different naming conventions for test names, one indicates a test just against a method, the other for a sequence of events, or larger behavior testing.

## Data Access

The author uses EF Code-first for ORM, Data repositories with DI, uses Repository Factory, Abstractfactory pattern. Also includes unit tests and data-transfer objects.

Code First is a manual way of setting up your Entities, bypassing autogeneration. You control everything, but you have to set up everything. Context classes need a constructor that points to a connection, `DbSet<T>` properties for tables, and override `OnModelCreating` method, where you can use `DbModelBuilder` fluent-interface for the ORM.

There tends to be one context class for each DB you'll use. There is one `DbSet<>` public property for each table.

Using `protected override void OnModelCreating(DbModelBuilder modelBuilder){...}`, you can remove the `PluralizingTableNameConvention` and ignore `ExtensionDataObject` and `IIdentifiableEntity`, so you can manually specify the table names and model names.

You then specify the mapping using `modelBuilder.Entity<YourModel>.HasKey<int>(e => e.Id).Ignore(e => e.EntityId)` and so forth. Use the `Ignore` to say a property is not found in a column from the corresponding table in the database.

Try to keep database specific data, like actual table names, out of the DataContext class, there's a practice the author will show.

Data Repositories - one data repository per table - using Linq-to-Entities. Going to define a pattern for CRUD, with methods defined through an interface. Repositories will be exported through MEF for testing. There is a interface for the standard CRUD, but then there will be additional methods for specific repositories that have their own separate interfaces they also implement.

The author shows examples of the interfaces and inherited classes of the data repositories, check this out again.

Data Repositories encapsilate functionality from a table, or a number of joined tables but have one table as a central table.

Finish watching Custom methods and repository interface with DI setup
