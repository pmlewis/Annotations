Structuring JavaScript - Dan Wahlin
----------------------

1. Prototype Pattern
  * Creates custom 'objects' using JavaScript's prototype
  * Very memory efficient, prototype functions are not duplicated in memory when there's multiple instances of your object
  * Can namespace functions and properties
  * Easy to extend, and easier to debug, lets users of the prototype overwrite prototype functions if they want to
  * Pattern structure

    ```
    var Calculator = function(output) {
      this.output = document.getElementById(output);
    };
    Calculator.prototype = {
      add: function(x, y) {
        this.output.innerHTML = x + y;
      }
    };
    var myCalc = new Calculator("sum");
    myCalc.add(3, 4);
    ```

  * Namespacing (Not exclusive to the prototype pattern, can do this anywhere)

    ```
    var FunMath = FunMath || {}; //Don't override if FunMath is defined
    FunMath.Calculator = function(output) {
    //...
    }
    ```
  * Overriding prototype methods

    ```
    FunMath.Calculator.prototype.add = function(x, y) {
      return x + y;
    }
    ```
1. Module Pattern
  * When you really want to have public functions and private functions, and you don't want anyone to touch them or extend them
  * Each instantiation of a module duplicates properties **and methods** in memory
  * Can be harder to debug
  * Pattern structure

    ```
    var Calculator = function(output) {
      var history = [];
      var out = document.getElementById(output);
      return {
        add: function(x, y) {
          out.innerHTML = x + y;
          history.push("add(" + x + ", " + y + ")");
        }
      };
    };
    ```
1. Revealing Module
  * Similar to Module, but with a 'Cleaner' way of exposing public members. Common pattern for implementing Singletons
  * Similar pros and cons to the Module
  * Pattern structure

    ```
    var calculator - function (eq) { //Lower case var is norm for this
      var eqCtl = document.getElementById(eq),
        doAdd = function (x, y) {
          var val = x + y;
          eqCtl.innerHTML = val;
        };
      return { add: doAdd }; //exposing public members
    }('eqCtl');
    ```
  * If you want to use this with the `new` syntax, you can leave off the self-invoke, and you should upper case the var
1. Revealing Prototype
  * Brings in pros from both prototype and revealing prototype patterns
  * functions loaded into memory once, extensible, and exposes only public members
  * Use of `this` can be tricky, and Constructor is separate from prototype definition
  * Pattern structure

    ```
    var Calculator = function (eq) {
      //vars defined here
      this.eqCtl = document.getElementById(eq);
    };
    Calculator.prototype = function () {
      //functions defined here
      var add = function (x, y) {
        var val = x + y;
        this.eqCtl.innerHTML = val;
      }
      return {
        //public members here
        add: add
      };
    }();
    ```
  * `this` could mean different things depending on the context. If you want to have functions in your prototype definition that operate on the current instantiation of the object, pass `this` into a function that does something like `double(thisObj) { return thisObj.value + thisObj.value }`, where double does not refer to `this` in its definition
  * Or, you can do `double.call(this);` with the above definition, where the `call()` function operates on another function, but you specify the context as the first argument, ie the `this` value in the function definition
