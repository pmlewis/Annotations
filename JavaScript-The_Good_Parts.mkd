Javascript, The Good Parts, The Lecture
=======================================

1. Programming Style and Your Brain
    1. Programming thought process
        * It's hard to keep your Gut and your Brain in agreement, as your Gut can fool your Brain.
        * Suffienciently high-level programming languages are the best means to balence the amount of code one can write in a day and how functional the code is.
        * Programming is hard because of the influence of perfection. Therefore, we release early to get the greatest amount of exposure to the real world in a state where it is easier to make change
        * Programming uses both Head and the Gut, and is very much an individual process, and is by no means algorithmic.
        * The brain is not particularly good at making trade-offs, waying good and bad, because it is influenced by the Gut
    1. Javascript has some really really good parts, and some really really bad parts
        * The author also wrote JSLint, which will hurt your feelings and help make your code better
        * **Always use brace syntax like the following**
        
                return {
                    ok: true
                };
                
        Otherwise, there will be a silent error and the object won't be there
        * JS has automatic semicolon insertion in interpertation, but **Always use semicolons**
        * Prefer forms (and style) that are error resistant
        * Beware of "clever" code, like using switch statements that rely on falling-through. That may be a sign you have a misinterpretation on what is needed to be done
    1. Understanding good programming style
        * "That hardly ever happens" means "It happens." Always remember this, regardless of style. But do consider it with style too.
        * Good style makes better programs, and style must not be about "self-expression" or "personal preference"
        * Programs must *communicate clearly* to *people*
        * No space between function name and (
        * One space between all other names and (
        * Immediately Invocable function expressions
            + Dont leave any dangly bits at the end. Do like this
            
                    (function () {
                        //...
                    }());
                    
       * Avoid using `with` statements, they end up being confusing
       * **Always avoid confusion**
       * **Always use `===`, never `==`**
       * If there is a feature of a languge that is tricky or problematic, and you can use something more reliable, always use the more reliable one
       * Avoid multline string constants
       * Make your programs look like what they do
       * Javascript has *function* scope, not *block* scope
            + remember var hoisting? Make it clear you understand this, and write code in a way that doesn't leave the reader questioning if the statement is being hoisted or not
            + Declare all variables at the top of the function, Declare all functions before you use them.
            + With the line `for (var i ...) {...}`, `i` is not scoped to the loop!
        * Write in the language you're writing in. Address style without the influence of other, maybe similar looking, languages
        * AVOID GLOBAL VARS. IF YOU ABSOLUTELY MUST, MAKE THEIR NAMES IN UPPERCASE
        * Constructor functions should be named with InitialCaps. Also, be super aware of the `new` keyword, as it probably doesn't do what you think it does
        * Javascript has implicitly global variables. So don't use something ambigious like `var a = b = 0` where `b` is implicity global
        * `++` can be a pre- or post-increment operator. But why be ambigious with at what time something can happen? Be certain with `x += 1`
        * JSLint style
            + automatically detect defects
            + if a programming construct could mask others, the construct should be considered defective
            + focuses on a language subset that is really good
        * Notes on performance
            + Performance specific code is usually crufty, ie may have more hardcoding, not 'agile' code
            + Clean code is easier to reason about, and clean code makes bugs more visible
            + *Premature optimization is the root of all evil* - Knuth
            + Most code has a negligible impact on performance. Avoid code twiddling, and spend more time on recognizing places to replace algorithms
            
            
1. And then there was JavaScript
    1.The History of JavaScript
        * designed and implemented in ten days
        * influenced by Java, Scheme, and Self (a dialect of Smalltalk)
        * JavaScript is synominous with ECMAScript
            + for widest compatibility, in the short term, work with features in the intersection of ES3 and ES5/Strict. For the long term, work with ES5/Strict. Avoid ES5/Default
    1. JavaScript fundamentals
        * objects
            + get
                - `object.name` or `object[expression]`
            + set
                - `object.name = value` or `object[expression] = value`
            + delete (though hardly used)
                - `delete object.name` or `delete object[expression]`
        * object literals, influencing the creation of JSON
            + check this out, in ES5, you can use `Object.defineProperties()` and can define the create function, and define properties for values in the object for whether or not the value is writable, enumerable, or configurable
        * JavaScript does not have classes. JavaScript has prototypes. And prototypes are very powerful, and more flexible than classes
        * There's some real gotchas with `for in (...)` and in counting values, come back to *JavaScript Fundamentals* and watch this more
        * Keys must be strings
        * JavaScript has the following types, where each is inherited from Object
            + Number
            + Boolean
            + String
            + Array
            + Date
            + RegExp
            + Function
    1. Number
        * Only one number type(!) - uses IEEE-754 "Double", 64-bit floating point
        * supports number literals, like using scientific notation
        * sometimes, testing arithmetic and conditionals can produce crazy results
        * has a number of Number helper methods
        * Numbers are first class
        * can add "extension" methods through adding to the prototype (though should only do this in library code)
        * `Math` object and methods
        * NaN - "not a number", value returned when an erronious operation occurred. Remember `NaN === NaN` is false!
    2. Bools, Strings, and Arrays
        * true and false
        * strings made of 16-bit Unicode chars - not quite UTF-16
        * strings are immutable
        * use `===` for equivalent strings
        * `"` for external strings
        * `'` for internal strings - by convention
        * can use `+` for concat, but beware of adding number strings, strings have a string.concat(string2)
        * `num.toString()` or `String(num)`
        * `Number(str)` or `+num`
        * `parseInt()` but will stop parsing at first occurance of a non-digit character
            + leading zeros in a number string denotes octal
            + pass in a second param, a radix, or base. for no ambiguity with leading 0's, use base 10
            + string.length
        * an interesting example of adding a method to String.prototype so that all strings are selftrimming
        * Arrays - inherieted from Object. not exactly like C arrays, much closer to maps or associative arrays
        * Arrays.length - not how many elements are in the array, but the highest index + 1
        * watch out if you use `for in` on an Array, does not guarantee a specific order of traversal
        * Array literals `var arr = []`
        * new items appended to the end by `arr[arr.length] = 'new item'`
        * the dot notation works, but only works with string indexes. Don't use the dot, use the brackets
        * Beware of Array.sort, compares elements as string values
        * can you use `delete arr[useless]` but there will be an `undefined` gap where `usless used to be
        * Use Array.splice(), but it's really slow
    3. Objects, Date, RegExp
        * Use objects when your objects have arbitrary string names, use arrays when you're using numbers
        * Date - based off of Java's Date class (**!!!**)
        * RegExp - syntax is clunky and ugly
        * **All values are objects, except for `null` and `undefined`**
        * `null` is used for empty values
        * `undefined` is the default value for variables and parameters that are not given a value, and the value of a member that isn't found in an object
        * typeof - a prefix operator that returns a string identifying its "type"
            + *Remember `typeof Array === 'object'` and `typeof null === 'object'`. the rest are what you expect them to be
        * Array.isArray()
        * *Falsy* values
            + `false`
            + `null`
            + `undefined`
            + ""
            + 0
            + `NaN`
            + beware! `"0"`, `"false"`, as strings are
             not falsy
       * JS is *loosly typed*, not untyped since there are types
       + all objects are passed by reference, not by value
       + `===` returns true if the two operators are the same object 
    4. Common JavaScript Statements
        * don't lead vars with `_` since these may clash with other vars in JS engines
        * `$` was originally used for 'machines', things that will generate their own names
        * convention: all vars, params, members, and functions start with lower case, except for Constructor functions
        * use `//` for comments
        * again, beware of adding strings together that may be numbers
        * `/` dividing two ints can produce a nonint value
        * `%` remainder op, not modulo op. `%` takes the sign of the first op
        * there are `==` and `!=`, but these can force type coercion. It is always better to use `===` and `!==`, which don't
        * `&&` guard, or *logical and*, can be used to avoid null refs
        * `||` *logical or*, can be used to assign a default value, or to not override already existing values. watch out when using with numbers, since 0 is falsy
        * `!` *logical not* returns the opposite truthy value to its op. `!!` returns a boolean value
        * bitwise ops - converts operands to a 32-bit signed int, does the thing, then converts it back to 64-bit float
        * statements
            + can use labels, to say `break` out of a really nasty loop and go to(!) a location
            + switches: strings work fine, and so do expressions as case statements(! :-) )
            + try, catch, throw
                - you can throw *anything*, there's an Error object you can use, but not totally necessary
                - catch will catch anything thrown. your code will have to assume its any object
                
1. Function, the Ultimate
    1. background on functions
        * Javascript uses functions for everything
        * optional name
        * produces an instance of a `function` object
        * first class, can be assigned to vars, can be stored in arrays
        * `function` objects inherit from Function.prototype
        * vars declared in a function are visible *anywhere* within that function, including in other functions
        * there's a different between `var myfunction = function() { ... };`: a function experssion, and `function myfunc() { ... }`: a function statement
            + remember hoisting
            + least just remember to
                - declare all vars at the top of the function
                - declare all functions before you use them
        * `return` statements to quit the function and/or return objects
        * `arguments`
            + all parameters passed to a function call can be referenced here, and is *array-like*
        * `this`
            + a reference to the object of invocation
        * Invocation
            + too many arguments, the extra arguments are ignored
            + too few, the missing values will be `undefined`
            + no type checking
        * four ways to invoke functions
            + method form
                + like classes
            + function form
                + like a standalone function
                + `this` is set to the global object
                + `var that = this`
            + constructor form
                + `new Beast(args);`
            + apply form
                + `functionObject.apply(thisObject, args)`
                + `functionObject.call(thisObject, args)`
    1. functions as subroutines
        * Closure
            + the context of the inner function includes the scope of the outer function, and
            + an inner function enjoys that context even after the parent functions have returned
            + understand that
            
                    var digit_name = (function() {
                        var names = ['zero', 'one', ...];
                        
                        return function (n) {
                            return names[n];
                        };
                    }());
                    
              is absolutely superior to
                
                    var digit_name = (function(n) {
                        var names = ['zero', 'one', ...];
                        
                        return names[n];
                    }());
                    
    1. Prototypal Inheritance
        * `Gizmo.prototype.toString = function () { return "gizmo " + this.id; };`
            + Adding to the prototype lets all objects of that prototype have access to the function
        	* Inheritance
        		+ `Hoozit.prototype = new Gizmo(); Hoozit.prototype.test = function (id) { return this.id === id; };`
        		+ this isn't too great though, not really intuitive, and not really self contained
        		+ there are ways of, in effect, creating your own means of inheriting and extending objects, like writing a new constructor function that takes an object you want to inherit from, and adding the additional objects to that
    	* function as a module
    		+ use this keep everything all neat and together, and utilizes closures
    
    				var singleton = (function () {
    					var privateVariable;
    					function privateFunction(x) {
    						...privateVariable...
    					}
    					return {
    						firstMethod: function (a,b) {
    							...privateVariable...
    						},
    						secondMethod: function (c) {
    							...privateFunction();...
    						}
    					};
    				}());
    
    		+ This is the Module Pattern
    		+ Constructor Pattern, or Functional Inheritance
    			1. Make an object
    				* Object literal, `new`, `Object.create`, call another power constructor
    			2. Define some vars and functions
    				* these become private members
    			3. Augment object with privileged methods
    				* use closures
    			4. Return the object
    
    					//template for power constructor
    					function myPowerConstructor(x) {
    						var that = otherMaker(x);
    						var secret = f(x);
    						that.priv = function() {
    							...secret x that...
    						}
    						return that;
    					}
    
    					//using the pattern for Gizmo and hoozit
    					function gizmo(id) {
    						return {
    							id: id,
    							toString: function() {
    								return "gizmo " + this.id;
    							}
    						};
    					}
    					function hoozit(id) {
    						var that = gizmo(id);
    						that.test = function (testid) {
    							return testid === this.id;
    						};
    						return that;
    					}
    
    		+ Neat thing about closures, parameters to function calls can be closed over also, this can used to create private vars
    		
    				function gizmo(id) {
    					return {
    						toString: function () {
    							return "gizmo " + id;
    						}
    					};
    				}
    				function hoozit(id) {
    					var that = gizmo(id);
    					that.test = function (testid) {
    						return testid === id;
    					};
    				}
    
    		+ Similarly, can create Shared Secrets, and Super Methods
        * Don't ever make functions in a loop! the new function closes over the loop's variables, not over their current values
            + for example, don't do
            
                    for (var i...) {
                        div_id = divs[i].id;
                        divs[i].onclick = function () {
                            alert(div_id);
                        };
                    }
                    
            + instead do,
            
                    var i;
                    function make_handler(div_id) {
                        return function () {
                            alert(div_id);
                        };
                    };
                    for (i...) {
                        div_id = divs[i].id;
                        divs[i].onclick = make_handler(div_id);
                    }
                    
            * *Go check out the Little Lisper and the Little Schemer!*
1. Problems
	* if you pass in parameters to a function, and attempt to change the parameters values, the params outside the function will have the same values going into the function. Not sure why, my understanding of "pass by value" and "pass by reference" must be different
	* These problems try to really test how well you grok functions, closures, working with functions that have any number of arguements, and things like using `.call()` and `.apply()`. Definitely good practice
1. Monads and gonads

